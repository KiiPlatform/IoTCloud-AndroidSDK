apply plugin: 'com.android.library'

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.3'
    publishNonDefault true

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // https://code.google.com/p/android/issues/detail?id=161404
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    sourceSets {
        String sharedTestDir = 'src/testLib/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

ext {
    branchString = null
    versionString = null
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm z')
    return formattedDate
}

android.libraryVariants.all { variant ->

    task ("generateJavadoc", dependsOn: assemble, type:Javadoc, overwrite: true) {
        mustRunAfter assemble
        title = "Thing Interaction Framework (thing-if) SDK for Android"
        description "thing-if SDK for Android API Reference"
        source = files() {
            fileTree(dir:'src/main/java').matching {
                include 'com/kii/thing_if/**'
                exclude 'com/kii/thing_if/internal/**'
            }
        }
        def androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        def compiledClasses = files("${project.projectDir}/build/intermediates/classes/release/")
        classpath = files(androidJar) + files(compiledClasses) + files(variant.javaCompile.classpath.files)
        destinationDir = file("build/outputs/javadoc")

        options.bottom = "Copyright 2015 Kii Corporation. All rights reserved. (Last updated on ${getDate()})"
        options.locale = 'en_US'
        failOnError true
    }

    task ("javadocArchive", type: Zip, dependsOn: [clean, generateJavadoc, setBranch, setVer], overwrite:true) {
        mustRunAfter clean
        from 'build/outputs/javadoc'
        def dest = 'build/outputs/archive'
        destinationDir = file(dest)
        archiveName = "apidoc.zip"
        doLast{
            file(dest + "/apidoc.zip").renameTo(file(dest + "/apidoc-${branchString}-${versionString}.zip"))
        }
    }

    task ("javadocJar", type: Jar, dependsOn: [clean, generateJavadoc], overwrite:true) {
        mustRunAfter clean
        classifier = 'javadoc'
        from 'build/outputs/javadoc'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:support-annotations:27.1.1'

    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.squareup.okhttp:okhttp:2.3.0'

    // dependencies for unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20160810'
    testImplementation "org.robolectric:robolectric:3.2.2"
    testImplementation 'com.squareup.okhttp:mockwebserver:2.3.0'
    testImplementation 'org.apache.commons:commons-lang3:3.4'
    testImplementation 'org.mockito:mockito-core:1.10.19'

    androidTestImplementation 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.squareup.okhttp:mockwebserver:2.3.0'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestImplementation 'commons-lang:commons-lang:2.6'
}

task setBranch << {

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'sh', 'build_scripts/getBranch.sh'

        standardOutput = stdout
    }
    branchString = stdout.toString().trim()
}

task setVer << {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git'
        args 'rev-list', '-n1', '--abbrev-commit', 'HEAD'
        standardOutput = stdout
    }
    versionString = stdout.toString().trim()
}

task makeAAR(dependsOn: [clean, setBranch, setVer, assemble]) {
    mustRunAfter clean
    doLast {
        def releaseAARName = "${project.name.trim()}-release-" +
                "${branchString}-${versionString}.aar"
        def debugAARName = "${project.name.trim()}-debug-" +
                "${branchString}-${versionString}.aar"
        copy {
            from "${project.buildDir}/outputs/aar"
            into "${project.buildDir}/artifacts"
            rename "${project.name.trim()}-release.aar", releaseAARName
            rename "${project.name.trim()}-debug.aar", debugAARName
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
