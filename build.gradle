// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task replaceGatewayIFAPITestVersion(type: ReplaceVersionTask) {
    target = "thingif/src/androidTest/java/com/kii/thingif/gateway/GatewayAPITestBase.java"
    replacing = "private static final String SDK_VERSION "
    version = thingIfVersion
}

task replaceThingIFAPITestVersion(type: ReplaceVersionTask) {
    target = "thingif/src/androidTest/java/com/kii/thingif/ThingIFAPITestBase.java"
    replacing = "private static final String SDK_VERSION "
    version = thingIfVersion
}

task replaceThingIFAPIVersion(type: ReplaceVersionTask) {
    target = "thingif/src/main/java/com/kii/thingif/ThingIFAPI.java"
    replacing = "private static final String SDK_VERSION "
    version = thingIfVersion
}

task replaceSdkInfoVersion(type: ReplaceVersionTask) {
    target = "sdk-info.txt"
    replacing = "version: "
    version = thingIfVersion
}

task replaceVersion(dependsOn: [replaceSdkInfoVersion,
        replaceThingIFAPIVersion,
        replaceThingIFAPITestVersion,
        replaceGatewayIFAPITestVersion]) {
}

class ReplaceVersionTask extends DefaultTask {

    String target = null
    String replacing = null
    String version = null

    @TaskAction
    def replace() {
        def reader = new InputStreamReader(new FileInputStream(target), "UTF-8")
        def builder = new StringBuilder()
        for (def str = reader.readLine(); str != null; str = reader.readLine()) {
            if (str.contains(replacing)) {
                str = str.replaceFirst("[\\d\\.]+", version)
    	}
            builder.append(str).append("\n")
        }
        reader.close()
        def dest = new FileOutputStream(target)
        dest.write(builder.toString().getBytes("UTF-8"))
        dest.close()

    }
}

task prepareArchives(dependsOn: [
        ":thingif:makeAAR",
        ":thingif:sourcesJar",
         "thingif:javadocJar"]) {
    mustRunAfter "thingif:clean"
    doLast {
        delete "archives"
        mkdir "archives"
    }
}

task generateArchives(type: Copy,
    dependsOn:
        [
            ":thingif:clean",
            prepareArchives
        ]) {
    from "thingif/build/outputs/aar/thingif-release.aar"
    from "thingif/build/libs/thingif-javadoc.jar"
    from "thingif/build/libs/thingif-sources.jar"
    into "archives"
}
