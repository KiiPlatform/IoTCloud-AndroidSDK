apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    publishNonDefault true

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // https://code.google.com/p/android/issues/detail?id=161404
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

ext {
    branchString = null
    versionString = null
}


task generateJavadoc(type: Javadoc) {
    title = "Kii IoT Cloud SDK for Android"
    description "Kii IoT Cloud SDK for Android"
    source = files() {
        fileTree(dir:'src/main/java').matching {
            exclude 'com/kii/iotcloud/internal/**'
            include 'com/kii/iotcloud/**'
        }
    }

    ext.androidJar =
            "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    ext.m2repo = "${android.sdkDirectory}/extras/android/m2repository"
    ext.supportAnnotationjar =
            ext.m2repo + "/com/android/support/support-annotations/22.2.0/support-annotations-22.2.0-sources.jar"
    classpath = files(ext.androidJar) + files(ext.supportAnnotationjar)

    destinationDir = file("build/outputs/javadoc")
}

assemble.dependsOn generateJavadoc

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.3.0'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
}

task setBranch << {

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'sh', 'build_scripts/getBranch.sh'

        standardOutput = stdout
    }
    branchString = stdout.toString().trim()
}

task setVer << {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git'
        args 'rev-list', '-n1', '--abbrev-commit', 'HEAD'
        standardOutput = stdout
    }
    versionString = stdout.toString().trim()
}

task makeAAR(dependsOn: [clean, setBranch, setVer, assemble]) {
    mustRunAfter clean
    doLast {
        def releaseAARName = "${project.name.trim()}-release-" +
                "${branchString}-${versionString}.aar"
        def debugAARName = "${project.name.trim()}-debug-" +
                "${branchString}-${versionString}.aar"
        copy {
            from "${project.buildDir}/outputs/aar"
            into "${project.buildDir}/artifacts"
            rename "${project.name.trim()}-release.aar", releaseAARName
            rename "${project.name.trim()}-debug.aar", debugAARName
        }
    }
}

task javadocArchive(type: Zip, dependsOn: [generateJavadoc, setBranch, setVer]) {
    from 'build/outputs/javadoc'
    destinationDir = file('build/outputs/javadoc')
    archiveName = 'apidoc.zip'
    doLast{
        copy {
            from 'build/outputs/javadoc/apidoc.zip'
            into './'
            rename "apidoc.zip", "apidoc-${branchString}-${versionString}.zip"
        }
    }
}

def getLogicalVersion(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'sh', 'build_scripts/getLogicalVersion.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Configure  maven publish
publishing {
    publications {
        kiiArchives(MavenPublication) {
            groupId "com.kii.thing-if"
            artifactId "thing-if"
            version "${project.getLogicalVersion()}"

            artifact(javadocArchive){
                classifier 'documentation'
                extension 'zip'
            }
            artifact("${project.buildDir}/outputs/aar/${project.name.trim()}-release.aar"){
                classifier 'library'
                extension 'aar'
            }
        }
    }
}

// configure for bintrayUpload task
bintray {
    user = 'yongpingchen'
    key = '70d679465cf6b5169fa01bbd58c91c24a9adb326'

    //the files to deploy are the result of maven publication
    publications = ['kiiArchives']
    dryRun = false; // deploy files

    publish = true //If version should be auto published after an upload

    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'KiiAndroidSDK'
        name = 'thing-if'
        userOrg = 'kii'
        websiteUrl = 'http://documentation.kii.com/'
        issueTrackerUrl = 'http://community.kii.com/'
        labels = ['Thing']
        publicDownloadNumbers = true
        version {
            name = "${project.getLogicalVersion()}" //Bintray logical version name
            desc = 'Thing Interaction Framework'
            released  = new Date()
            vcsTag = "${project.getLogicalVersion()}"
        }
    }
}

// generate documentation and pom.xml before hand
bintrayUpload {
    dependsOn javadocArchive, 'generatePomFileForKiiArchivesPublication'
}
